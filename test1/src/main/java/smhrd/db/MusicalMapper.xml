<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MusicalMapper">

	<!-- ResultMap 설정 -->
	<resultMap id="musicalDetailMap"
		type="smhrd.model.MusicalDetailVO">
		<result property="musicalId" column="musicalId" />
		<result property="musicalTitle" column="musicalTitle" />
		<result property="musicalPoster" column="musicalPoster" />
		<result property="musicalStDt" column="musical_ST_DT" />
		<result property="musicalEdDt" column="musical_ED_DT" />
		<result property="hallName" column="hallName" />
		<result property="showIdx" column="showIdx" />
		<result property="showDate" column="showDate" />
		<result property="showRuntime" column="showRuntime" />
		<result property="showPrice" column="showPrice" />
		<result property="showImg" column="show_img" />
		<result property="showViews" column="showViews" />
	</resultMap>

	<!-- 회원가입 -->
	<insert id="join" parameterType="smhrd.model.Member">
		INSERT INTO TB_USER (USER_ID,
		USER_PW, USER_NAME, USER_EMAIL, USER_TEL,
		JOINED_AT)
		VALUES (#{userId},
		#{userPw}, #{userName}, #{userEmail}, #{userTel},
		SYSTIMESTAMP)
	</insert>

	<!-- 로그인 -->
	<select id="login" parameterType="smhrd.model.Member"
		resultType="smhrd.model.Member">
		SELECT USER_ID AS userId,
		USER_PW AS userPw,
		USER_NAME AS
		userName,
		USER_EMAIL AS userEmail,
		USER_TEL AS userTel,
		JOINED_AT AS
		joinedAt,
		USER_IMG AS userImg
		FROM TB_USER
		WHERE USER_ID = #{userId} AND
		USER_PW = #{userPw}
	</select>
	
	<!-- show 아이디 가져오기 ? -->
	<select id="getShowIdxByMusicalId" parameterType="string"
		resultType="string">
		SELECT SHOW_IDX
		FROM TB_SHOW
		WHERE MUSICAL_ID = #{musicalId}
	</select>

	<!-- 게시글 등록 -->
	<insert id="insertBoard" parameterType="smhrd.model.BoardVO">
		INSERT INTO TB_POST (
		POST_TITLE, POST_CONTENT, CREATED_AT,
		POST_VIEWS, POST_LIKES, USER_ID,
		POST_FILE_NAME, POST_FILE_PATH
		) VALUES (
		#{postTitle}, #{postContent},
		SYSDATE,
		#{postViews}, #{postLikes}, #{userId}, #{postFileName},
		#{postFilePath}
		)
	</insert>



	<!-- 게시글 목록 가져오기 -->
	<select id="getBoardList" resultType="smhrd.model.BoardVO">
		SELECT POST_IDX AS postIdx,
		POST_TITLE AS postTitle,
		POST_CONTENT AS postContent,
		CREATED_AT AS
		createdAt,
		POST_VIEWS AS postViews,
		POST_LIKES AS postLikes,
		USER_ID AS
		userId,
		POST_FILE_NAME AS postFileName,
		POST_FILE_PATH AS postFilePath
		FROM TB_POST
		ORDER BY CREATED_AT DESC
	</select>

	<!-- 게시글 상세보기 -->
	<select id="getBoardDetail" parameterType="int"
		resultType="smhrd.model.BoardVO">
		SELECT POST_IDX AS postIdx,
		POST_TITLE AS postTitle,
		POST_CONTENT AS postContent,
		CREATED_AT AS createdAt,
		POST_VIEWS AS
		postViews,
		POST_LIKES AS postLikes,
		USER_ID AS userId,
		POST_FILE_NAME AS
		postFileName,
		POST_FILE_PATH AS postFilePath
		FROM TB_POST
		WHERE POST_IDX
		= #{postIdx}
	</select>


	<!-- 게시글 조회수 증가 -->
	<update id="incrementViewCount" parameterType="int">
		UPDATE TB_POST
		SET
		POST_VIEWS = POST_VIEWS + 1
		WHERE POST_IDX = #{postIdx}
	</update>

	<!-- 게시글 좋아요 증가 -->
	<update id="incrementPostLikes" parameterType="int">
		UPDATE TB_POST
		SET
		POST_LIKES = POST_LIKES + 1
		WHERE POST_IDX = #{postIdx}
	</update>

	<!-- 게시글 좋아요 수 조회 -->
	<select id="getPostLikes" parameterType="int" resultType="int">
		SELECT
		POST_LIKES
		FROM TB_POST
		WHERE POST_IDX = #{postIdx}
	</select>



	<!-- 댓글작성 -->
	<insert id="insertComment" parameterType="smhrd.model.CommentVO">
		INSERT INTO TB_COMMENT
		( POST_IDX, USER_ID, CMT_CONTENT, CREATED_AT,
		CMT_LIKES)
		VALUES (
		#{postIdx}, #{userId}, #{cmtContent}, SYSTIMESTAMP, 0)
	</insert>


	<!-- 댓글 불러오기 -->
	<select id="getComments" parameterType="int"
		resultType="smhrd.model.CommentVO">
		SELECT
		CMT_IDX AS cmtIdx,
		POST_IDX AS postIdx,
		USER_ID AS
		userId,
		CMT_CONTENT AS cmtContent,
		CREATED_AT AS createdAt,
		CMT_LIKES AS
		cmtLikes
		FROM TB_COMMENT
		WHERE POST_IDX = #{postIdx}
		ORDER BY CREATED_AT
		DESC
	</select>

	<!-- 댓글 좋아요수 -->
	<update id="incrementCommentLikes" parameterType="int">
		UPDATE
		TB_COMMENT
		SET CMT_LIKES = CMT_LIKES + 1
		WHERE CMT_IDX = #{cmtIdx}
	</update>


	<!-- 뮤지컬 목록 가져오기 -->
	<select id="getMusicalList" resultType="smhrd.model.MusicalVO">
    SELECT 
        M.MUSICAL_ID AS musicalId,       
        S.SHOW_IDX AS showIdx,           
        M.MUSICAL_POSTER AS musicalPoster, 
        M.MUSICAL_TITLE AS musicalTitle,
        M.MUSICAL_CREATE AS musicalCreate, -- TB_MUSICAL 테이블의 MUSICAL_CREATE 필드 추가
        M.MUSICAL_LICENSE AS musicalLicense -- TB_MUSICAL 테이블의 MUSICAL_LICENSE 필드 추가
    FROM 
        TB_MUSICAL M
    JOIN 
        TB_SHOW S ON M.MUSICAL_ID = S.MUSICAL_ID
</select>



	<!-- 상세정보 조회수 증가 -->
	<update id="incrementMusicalViews" parameterType="string">
		UPDATE TB_SHOW
		SET SHOW_VIEWS = SHOW_VIEWS + 1
		WHERE MUSICAL_ID = #{musicalId}
	</update>

	<!-- 상세정보 뮤지컬 가져오기 -->
	<select id="getMusicalDetails" parameterType="string"
		resultType="smhrd.model.MusicalDetailVO">
		SELECT
		M.MUSICAL_ID AS musicalId,
		M.MUSICAL_TITLE AS
		musicalTitle,
		M.MUSICAL_POSTER AS musicalPoster,
		M.MUSICAL_ST_DT AS
		musicalStDt,
		M.MUSICAL_ED_DT AS musicalEdDt,
		S.HALL_NAME AS hallName,
		S.SHOW_IDX AS showIdx,
		S.SHOW_DT AS showDate,
		S.SHOW_RUNTIME AS
		showRuntime,
		S.SHOW_PRICE AS showPrice,
		S.SHOW_IMGS AS showImg,
		S.SHOW_VIEWS AS showViews
		FROM TB_MUSICAL M
		JOIN TB_SHOW S ON
		M.MUSICAL_ID = S.MUSICAL_ID
		WHERE M.MUSICAL_ID = #{musicalId}
	</select>


	<!-- 관심 등록 여부 확인 -->
<select id="isFavoriteExists" parameterType="smhrd.model.FavoriteVO" resultType="int">
    SELECT COUNT(*)
    FROM TB_FAVORITE F
    JOIN TB_SHOW S ON F.SHOW_IDX = S.SHOW_IDX
    JOIN TB_USER U ON F.USER_ID = U.USER_ID
    WHERE F.USER_ID = #{userId}
      AND F.SHOW_IDX = #{showIdx}
</select>


<insert id="addFavorite" parameterType="smhrd.model.FavoriteVO">
    INSERT INTO TB_FAVORITE (USER_ID, SHOW_IDX, CREATED_AT)
    SELECT #{userId}, #{showIdx}, CURRENT_TIMESTAMP
    FROM DUAL
    WHERE EXISTS (
        SELECT 1
        FROM TB_USER U
        WHERE U.USER_ID = #{userId}
    )
    AND EXISTS (
        SELECT 1
        FROM TB_SHOW S
        WHERE S.SHOW_IDX = #{showIdx}
    )
</insert>


<delete id="removeFavorite" parameterType="smhrd.model.FavoriteVO">
    DELETE FROM TB_FAVORITE
    WHERE USER_ID = #{userId} AND SHOW_IDX = #{showIdx}
</delete>





	<!-- 상위 5개 뮤지컬 포스터 가져오기 -->
	<select id="getTopMusicalPosters"
		resultType="smhrd.model.MusicalVO">
    <![CDATA[
    SELECT 
        SQ.MUSICAL_ID AS musicalId,
        SQ.MUSICAL_TITLE AS musicalTitle,
        SQ.MUSICAL_POSTER AS musicalPoster,
        SQ.SHOW_IDX AS showIdx
    FROM (
        SELECT 
            M.MUSICAL_ID,
            M.MUSICAL_TITLE,
            M.MUSICAL_POSTER,
            S.SHOW_IDX,
            ROW_NUMBER() OVER (ORDER BY S.SHOW_VIEWS DESC) AS RN
        FROM 
            TB_SHOW S
        JOIN 
            TB_MUSICAL M ON S.MUSICAL_ID = M.MUSICAL_ID
    ) SQ
    WHERE SQ.RN <= 5
    ]]>
	</select>

	<!-- 회원 이름 변경 -->
	<update id="updateUserName" parameterType="map">
		UPDATE TB_USER
		SET
		USER_NAME = #{newName}
		WHERE USER_ID = #{userId}
	</update>







	<!-- 리뷰 추가 -->
	<insert id="insertReview" parameterType="smhrd.model.ReviewVO">
    INSERT INTO TB_REVIEW (
        SHOW_IDX, USER_ID, REVIEW_CONTENT, REVIEW_STAR, CREATED_AT, REVIEW_LIKES
    )
    SELECT 
        S.SHOW_IDX, 
        U.USER_ID, 
        #{reviewContent}, 
        #{reviewStar}, 
        CURRENT_TIMESTAMP, 
        0
    FROM 
        TB_SHOW S
    JOIN 
        TB_USER U 
        ON U.USER_ID = #{userId}
    WHERE 
        S.SHOW_IDX = #{showIdx}
</insert>





</mapper>
